syntax = "proto3";

option go_package = "grpc-example/proto";

// package name for the generated go files
package proto;
import "google/api/annotations.proto";

// The greeting service definition.
service Greeter {

  // In this way you can define a rpc function prototype
  rpc SayHello (HelloRequest) returns (HelloReply) {}

  // Prototype for function that will be REST service
  // GET service
  rpc EchoGET(HelloRequest) returns (HelloReply) {
    option (google.api.http) = {
      get: "/api/v1/greet"
    };
  }
  // POST service
  rpc  EchoPOST(HelloRequest) returns (HelloReply){
    option (google.api.http)={
      post:"/api/v1/greet"
      body : "name"
    };
  }

  // GET service with query parameter
  rpc  EchoName(HelloRequest) returns (HelloReply){
    option (google.api.http)={
      get:"/api/v1/greet/{name}"
    };
  }
}

// The request message containing the user's name.
message HelloRequest {
  string name = 1;
}

// The response message containing the greetings
message HelloReply {
  string message = 1;
}

// Command to compile the proto
// tools/protoc/bin/protoc --proto_path=proto -I tools/protoc/include -I tools/googleapis/googleapis-master --go_out=proto --go_opt=paths=source_relative --go-grpc_out=proto --go-grpc_opt=paths=source_relative --grpc-gateway_out=proto --grpc-gateway_opt=paths=source_relative proto/test.proto

// // These are few parameter details
// --go_out=proto this on is for folder location of test.pb.go file
// --go-grpc_out=proto this on is for folder location of test_grpc.pb.go file
// --go-gateway_out=proto this on is for folder location of test.pb.gw.go file